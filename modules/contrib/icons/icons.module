<?php

/**
 * @file
 * Contains icons.module..
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Menu\MenuLinkInterface;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\icons\Entity\IconSetInterface;

/**
 * Implements hook_help().
 */
function icons_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the icons module.
    case 'help.page.icons':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Icons module provides a "base" configuration API for icons. It defines a plugin manager for icons so that developers can build their own plugin to provide icons on a generic way in drupal. Default this module includes sub modules Icomoon and Fontello. But it is pretty easy to create your own.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function icons_theme() {
  return [
    'icon' => [
      'variables' => [
        'icon_set' => NULL,
        'attributes' => [],
      ],
      'template' => 'icon',
    ],
    'icon_select' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function icons_theme_suggestions_icon(array $variables) {
  $suggestions = array();

  if ($variables['icon_set'] instanceof IconSetInterface) {
    $suggestions[] = 'icon__' . $variables['icon_set']->getPluginId();
    $suggestions[] = 'icon__' . $variables['icon_set']->id();
  }

  return $suggestions;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds the icons prefix and suffix icon select widget to the form. This will
 * enable the configuration of an icon in the views menu link from the view
 * display.
 */
function icons_form_views_ui_edit_display_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $options = icons_get_allowed_values();

  /** @var \Drupal\views_ui\ViewUI $view */
  $view = $form_state->get('view');
  $display = $view->get('display');
  $view_display_id = $form_state->get('display_id');

  // Details fieldset for icon fields.
  $form['options']['menu']['icons'] = [
    '#type' => 'details',
    '#title' => t('Icons'),
    '#tree' => TRUE,
  ];

  // This is needed to make sure the icons container is inside the options menu
  // containers. Because for some reason they use the #prefix and #suffix of 2
  // different elements to markup fields together within a diff.
  if (isset($form['options']['menu']['context']['#weight'])) {
    $form['options']['menu']['icons']['#weight'] = $form['options']['menu']['context']['#weight'] - 1;
  }
  elseif (isset($form['options']['menu']['context']['#suffix'])) {
    unset($form['options']['menu']['context']['#suffix']);
    $form['options']['menu']['icons']['#suffix'] = '</div>';
  }

  $default_value = NULL;
  if (isset($display[$view_display_id]['display_options']['menu']['icons']['icon_prefix'])) {
    $default_value = $display[$view_display_id]['display_options']['menu']['icons']['icon_prefix'];
  }

  // Prefix field to show an icon at the begin of the text of an link.
  $form['options']['menu']['icons']['icon_prefix'] = [
    '#type' => 'icon_select',
    '#options' => $options,
    '#default_value' => !empty($default_value) ? $default_value : NULL,
  ];

  $default_value = NULL;
  if (isset($display[$view_display_id]['display_options']['menu']['icons']['icon_suffix'])) {
    $default_value = $display[$view_display_id]['display_options']['menu']['icons']['icon_suffix'];
  }

  // Suffix field to show an icon at the end of the text of an link.
  $form['options']['menu']['icons']['icon_suffix'] = [
    '#type' => 'icon_select',
    '#options' => $options,
    '#default_value' => !empty($default_value) ? $default_value : NULL,
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds the icons prefix and suffix icon select widget to the form. This will
 * enable the configuration of an icon in the menu link content from the entity
 * form.
 */
function icons_form_menu_link_content_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $menu_link = $form_state->getFormObject()->getEntity();
  $menu_link_options = $menu_link->link->first()->options ?: [];
  $menu_link_icons = isset($menu_link_options['icons']) ? $menu_link_options['icons'] : [];

  $form['options']['icons'] = [
    '#type' => 'details',
    '#title' => t('Icons'),
    '#weight' => -2,
    '#tree' => TRUE,
  ];

  $form['options']['icons']['#open'] = TRUE;

  $options = icons_get_allowed_values();

  // Prefix field to show an icon at the begin of the text of an link.
  $form['options']['icons']['icon_prefix'] = [
    '#title' => t('Prefix'),
    '#type' => 'icon_select',
    '#options' => $options,
    '#default_value' => isset($menu_link_icons['icon_prefix']) ? $menu_link_icons['icon_prefix'] : '',
  ];

  // Suffix field to show an icon at the end of the text of an link.
  $form['options']['icons']['icon_suffix'] = [
    '#title' => t('Suffix'),
    '#type' => 'icon_select',
    '#options' => $options,
    '#default_value' => isset($menu_link_icons['icon_suffix']) ? $menu_link_icons['icon_suffix'] : '',
  ];

  $form['actions']['submit']['#submit'][] = 'icons_menu_link_content_form_submit';
}

/**
 * Submit function for menu add / edit form to save icons.
 *
 * @param array $form
 *   Form array with elements and attributes of the menu link content form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state of the menu link content form.
 */
function icons_menu_link_content_form_submit(array $form, FormStateInterface $form_state) {
  /** @var \Drupal\menu_link_content\MenuLinkContentInterface $menu_link */
  $menu_link = $form_state->getFormObject()->getEntity();
  $options = [
    'icons' => $form_state->getValue('icons'),
  ];

  $menu_link_options = $menu_link->link->first()->options;

  $menu_link->link->first()->options = array_merge($menu_link_options, $options);
  $menu_link->save();
}

/**
 * Implements hook_preprocess_HOOK().
 */
function icons_preprocess_menu(array &$variables) {
  icons_menu_link_content_set_attributes($variables['items']);
}

/**
 * Set the attributes on the given items.
 *
 * @param array $items
 *   List of menu items.
 */
function icons_menu_link_content_set_attributes(array &$items) {
  foreach ($items as &$item) {
    $menu_link_icons = icons_menu_link_content_get_attributes($item['original_link']);

    if (!empty($menu_link_icons['icon_prefix']) || !empty($menu_link_icons['icon_suffix'])) {
      icons_format_item($item, $menu_link_icons['icon_prefix'], $menu_link_icons['icon_suffix']);
    }

    if (!empty($item['below'])) {
      icons_menu_link_content_set_attributes($item['below']);
    }
  }
}

/**
 * Get menu link attributes.
 *
 * @param \Drupal\Core\Menu\MenuLinkInterface $menu_link_plugin
 *   A menu link content plugin.
 *
 * @return array
 *   An array with the attributes.
 */
function icons_menu_link_content_get_attributes(MenuLinkInterface $menu_link_plugin) {
  $icons = [
    'icon_prefix' => NULL,
    'icon_suffix' => NULL,
  ];

  try {
    $plugin_id = $menu_link_plugin->getPluginId();
  }
  catch (PluginNotFoundException $e) {
    return $icons;
  }

  if (strpos($plugin_id, ':') === FALSE) {
    return $icons;
  }

  list($entity_type, $uuid) = explode(':', $plugin_id, 2);

  switch ($entity_type) {
    case 'menu_link_content':
      try {
        $entity = \Drupal::entityManager()
          ->loadEntityByUuid($entity_type, $uuid);
        $options = $entity->link->first()->options;

        if (isset($options['icons'])) {
          $icons = $options['icons'];
        }
      }
      catch (PluginNotfoundException $e) {
        // Make sure we catch failed entity loadings.
      }
      break;

    case 'views_view':
      /** @var \Drupal\views\ViewExecutable $view */
      $view = $menu_link_plugin->loadView();
      $display = $view->getDisplay();
      $options = $display->getOption('menu');

      $icon_prefix = NULL;
      if (isset($options['icon_prefix'])) {
        $icon_prefix = $options['icon_prefix'];
      }

      $icon_suffix = NULL;
      if (isset($options['icon_suffix'])) {
        $icon_suffix = $options['icon_suffix'];
      }

      $icons = [
        'icon_prefix' => $icon_prefix,
        'icon_suffix' => $icon_suffix,
      ];
      break;
  }

  return $icons;
}

/**
 * Prepares variables for icon select element templates.
 *
 * Default template: icon-select.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 */
function template_preprocess_icon_select(array &$variables) {
  $element = $variables['element'];

  $variables['icon_picker'] = $element['#icon_picker'];
  $variables['icon_select'] = $element['#icon_select'];
}

/**
 * Format menu link item from preprocess menu into an menu link item with icons.
 *
 * @param array $item
 *   Menu link item to alter.
 * @param string $icon_prefix
 *   Icon prefix from the menu link settings.
 * @param string $icon_suffix
 *   Icon suffix from the menu link settings.
 */
function icons_format_item(array &$item, $icon_prefix, $icon_suffix) {
  $title = [];
  if (!isset($item['attributes']['title'])) {
    $item['attributes']['title'] = $item['title'];
  }

  // Build the render array for the title which also includes the icon prefix
  // and suffix now.
  if (!empty($icon_prefix)) {
    $value = explode(':', $icon_prefix);
    if (count($value) > 1) {
      list($icon_set, $icon_name) = $value;
      $title['icon_prefix'] = [
        '#type' => 'icon',
        '#icon_set' => $icon_set,
        '#icon_name' => $icon_name,
        '#title' => $item['title'],
      ];
    }
  }

  $title['title'] = [
    '#type' => 'markup',
    '#markup' => $item['title'],
  ];

  if (!empty($icon_suffix)) {
    $value = explode(':', $icon_suffix);
    if (count($value) > 1) {
      list($icon_set, $icon_name) = $value;
      $title['icon_suffix'] = [
        '#type' => 'icon',
        '#icon_set' => $icon_set,
        '#icon_name' => $icon_name,
        '#title' => $item['title'],
      ];
    }
  }

  $item['title'] = \Drupal::service('renderer')
    ->render($title);
}

/**
 * Get options list with allowed values for icons selection widget.
 *
 * @return array
 *   Return list of allowed values to select in the icon select form element.
 */
function icons_get_allowed_values() {
  $values = [];

  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
  $query = \Drupal::entityQuery('icon_set');
  $ids = $query->execute();

  /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager */
  $entityTypeManager = \Drupal::service('entity_type.manager');
  $iconSetStorage = $entityTypeManager->getStorage('icon_set');

  /** @var \Drupal\icons\Entity\IconSetInterface[] $icon_sets */
  $icon_sets = $iconSetStorage->loadMultiple($ids);

  $use_groups = FALSE;
  if (count($icon_sets) > 1) {
    $use_groups = TRUE;
  }

  // Add a library whose information changes depending on certain conditions.
  foreach ($icon_sets as $icon_set) {
    /** @var \Drupal\icons_icomoon\Plugin\IconLibrary\IcoMoon $plugin */
    $plugin = $icon_set->getPlugin();
    $icons = $plugin->getIcons();

    $icon_values = [];
    foreach ($icons as $icon_key => $icon_title) {
      $icon_values[$icon_set->id() . ':' . $icon_key] = $icon_title;
    }

    if ($use_groups) {
      $values[$icon_set->label()] = $icon_values;
    }
    else {
      $values = $icon_values;
    }
  }

  return $values;
}
